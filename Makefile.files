COMPILE= $(CC) $(CFLAGS)

define srcFilesToObjFiles
$(subst .cpp,.o,$(1:$(2)/%=$(3)/%))
endef

define objFilesToSrcFiles
$(subst .o,.cpp,$(1)/$(2:$(3)/%=%))	
endef

define toFullPath
$(patsubst %,$(1)/%,$(2))
endef

# ==================================
# GTE Demo
# ==================================

GTEDEMOBASESRC= src/gtedemo
GTEDEMOBASESRCS= $(call toFullPath,$(GTEDEMOBASESRC),gtedemo.cpp game.cpp gameutil.cpp lavafield.cpp scene.cpp) 

GTEDEMOSCENESRC= src/gtedemo/scenes
GTEDEMOSCENESRCS= $(call toFullPath,$(GTEDEMOSCENESRC),lavascene.cpp castlescene.cpp poolscene.cpp) 

ALLGTEDEMOSRCS= $(GTEDEMOBASESRCS) $(GTEDEMOSCENESRCS)

GTEDEMOBASEOBJ= $(call srcFilesToObjFiles,$(GTEDEMOBASESRCS),$(GTEDEMOBASESRC),$(OUTPUTDIR))
GTEDEMOSCENEOBJ= $(call srcFilesToObjFiles,$(GTEDEMOSCENESRCS),$(GTEDEMOSCENESRC),$(OUTPUTDIR))

ALLGTEDEMOOBJ= $(GTEDEMOBASEOBJ) $(GTEDEMOSCENEOBJ)

$(GTEDEMOBASEOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(GTEDEMOBASESRC),$@,$(OUTPUTDIR)) 
$(GTEDEMOSCENEOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(GTEDEMOSCENESRC),$@,$(OUTPUTDIR))
	

# ==================================
# Global
# ==================================	

GLOBALSRC= src/global
GLOBALSRCS= $(GLOBALSRC)/constants.cpp
GLOBALOBJ = $(OUTPUTDIR)/constants.o

$(GLOBALOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(GLOBALSRC),$@,$(OUTPUTDIR)) 
	

# ==================================
# Error
# ==================================	

ERRORSRC= src/error
ERRORSRCS= $(ERRORSRC)/errormanager.cpp
ERROROBJ= $(OUTPUTDIR)/errormanager.o

$(ERROROBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(ERRORSRC),$@,$(OUTPUTDIR))  
	

# ==================================
# FileSystem
# ==================================	

FILESYSTEMSRC= src/filesys
FILESYSTEMSRCS= $(call toFullPath,$(FILESYSTEMSRC),filesystem.cpp filesystemIX.cpp)
FILESYSTEMOBJ= $(call srcFilesToObjFiles,$(FILESYSTEMSRCS),$(FILESYSTEMSRC),$(OUTPUTDIR))

$(FILESYSTEMOBJ):
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(FILESYSTEMSRC),$@,$(OUTPUTDIR)) 


# ==================================
# Input
# ==================================

INPUTSRC= src/input
INPUTSRCS= $(call toFullPath,$(INPUTSRC),inputmanager.cpp inputmanagerGL.cpp)
INPUTOBJ= $(call srcFilesToObjFiles,$(INPUTSRCS),$(INPUTSRC),$(OUTPUTDIR))
	
$(INPUTOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(INPUTSRC),$@,$(OUTPUTDIR)) 

# ==================================
# Engine
# ==================================

ENGINESRC= src
ENGINESRCS= $(ENGINESRC)/engine.cpp $(ENGINESRC)/enginetypes.cpp
ENGINEOBJ = $(OUTPUTDIR)/engine.o $(OUTPUTDIR)/enginetypes.o

$(ENGINEOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(ENGINESRC),$@,$(OUTPUTDIR)) 


# ==================================
# EngineObjects
# ==================================

ENGINEOBJECTSRC= src/object
ENGINEOBJECTSRCS= $(call toFullPath,$(ENGINEOBJECTSRC),engineobjectmanager.cpp engineobject.cpp shaderorganizer.cpp objectpairkey.cpp)
ENGINEOBJECTOBJ= $(call srcFilesToObjFiles,$(ENGINEOBJECTSRCS),$(ENGINEOBJECTSRC),$(OUTPUTDIR))
		
$(ENGINEOBJECTOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(ENGINEOBJECTSRC),$@,$(OUTPUTDIR)) 


# ==================================
# Asset
# ==================================

ASSETSRC= src/asset
ASSETSRCS= $(call toFullPath,$(ASSETSRC),assetimporter.cpp importutil.cpp modelimporter.cpp shadersourceloader.cpp shadersourceloaderGL.cpp)
ASSETOBJ= $(call srcFilesToObjFiles,$(ASSETSRCS),$(ASSETSRC),$(OUTPUTDIR))
	
$(ASSETOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(ASSETSRC),$@,$(OUTPUTDIR)) 


# ==================================
# Image processing
# ==================================	

IMAGESRC= src/graphics/image
IMAGESRCS= $(call toFullPath,$(IMAGESRC),rawimage.cpp imageloader.cpp)
IMAGEOBJ= $(call srcFilesToObjFiles,$(IMAGESRCS),$(IMAGESRC),$(OUTPUTDIR))
	
$(IMAGEOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(IMAGESRC),$@,$(OUTPUTDIR)) 


# ==================================
# Particle system
# ==================================	

PARTICLESSRC= src/graphics/particles
PARTICLESSRCS= $(call toFullPath,$(PARTICLESSRC),particlesystem.cpp particleutil.cpp particlemeshrenderer.cpp)
PARTICLEOBJ= $(call srcFilesToObjFiles,$(PARTICLESSRCS),$(PARTICLESSRC),$(OUTPUTDIR))
	
$(PARTICLEOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(PARTICLESSRC),$@,$(OUTPUTDIR)) 


# ==================================
# Scene
# ==================================	

SCENESRC= src/scene
SCENESRCS= $(call toFullPath,$(SCENESRC),sceneobject.cpp sceneobjectcomponent.cpp scenemanager.cpp eventmanager.cpp layermanager.cpp)
SCENEOBJ= $(call srcFilesToObjFiles,$(SCENESRCS),$(SCENESRC),$(OUTPUTDIR))
	
$(SCENEOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(SCENESRC),$@,$(OUTPUTDIR)) 


# ==================================
# Graphics
# ==================================

BASEGRAPHICSSRC= src/graphics
LIGHTSRC= $(BASEGRAPHICSSRC)/light
TEXTURESRC= $(BASEGRAPHICSSRC)/texture
VIEWSYSSRC= $(BASEGRAPHICSSRC)/view
COLORSRC= $(BASEGRAPHICSSRC)/color
UVSRC= $(BASEGRAPHICSSRC)/uv

LIGHTSRCS= $(call toFullPath,$(LIGHTSRC),light.cpp)
TEXTURESRCS= $(call toFullPath,$(TEXTURESRC),texture.cpp textureattr.cpp textureGL.cpp atlas.cpp)
VIEWSYSSRCS= $(call toFullPath,$(VIEWSYSSRC),camera.cpp)
COLORSRCS= $(call toFullPath,$(COLORSRC),color4.cpp color4factory.cpp color4array.cpp)
UVSRCS= $(call toFullPath,$(UVSRC),uv2.cpp uv2factory.cpp uv2array.cpp)
BASEGRAPHICSSRCS= $(call toFullPath,$(BASEGRAPHICSSRC),graphics.cpp stdattributes.cpp stduniforms.cpp screendesc.cpp graphicsGL.cpp)

ALLGRAPHICSSRCS= $(BASEGRAPHICSSRCS) $(LIGHTSRCS) $(TEXTURESRCS) $(VIEWSYSSRCS) $(COLORSRCS) $(UVSRCS) 

BASEGRAPHICSOBJ= $(call srcFilesToObjFiles,$(BASEGRAPHICSSRCS),$(BASEGRAPHICSSRC),$(OUTPUTDIR))
COLOROBJ= $(call srcFilesToObjFiles,$(COLORSRCS),$(COLORSRC),$(OUTPUTDIR))
LIGHTOBJ= $(call srcFilesToObjFiles,$(LIGHTSRCS),$(LIGHTSRC),$(OUTPUTDIR))
TEXTUREOBJ= $(call srcFilesToObjFiles,$(TEXTURESRCS),$(TEXTURESRC),$(OUTPUTDIR))
VIEWSYSOBJ= $(call srcFilesToObjFiles,$(VIEWSYSSRCS),$(VIEWSYSSRC),$(OUTPUTDIR))
UVOBJ= $(call srcFilesToObjFiles,$(UVSRCS),$(UVSRC),$(OUTPUTDIR))

ALLGRAPHICSOBJ = $(BASEGRAPHICSOBJ) $(COLOROBJ) $(LIGHTOBJ) $(TEXTUREOBJ) $(VIEWSYSOBJ) $(UVOBJ)

$(BASEGRAPHICSOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(BASEGRAPHICSSRC),$@,$(OUTPUTDIR)) 
	
$(LIGHTOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(LIGHTSRC),$@,$(OUTPUTDIR)) 
	
$(TEXTUREOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(TEXTURESRC),$@,$(OUTPUTDIR)) 
	
$(VIEWSYSOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(VIEWSYSSRC),$@,$(OUTPUTDIR)) 
	
$(COLOROBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(COLORSRC),$@,$(OUTPUTDIR)) 
	
$(UVOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(UVSRC),$@,$(OUTPUTDIR)) 


# ==================================
# Animation
# ==================================

ANIMATIONSRC= src/graphics/animation
ANIMATIONSRCS= $(call toFullPath,$(ANIMATIONSRC),skeleton.cpp vertexbonemap.cpp skeletonnode.cpp bone.cpp sceneobjectskeletonnode.cpp keyframeset.cpp keyframe.cpp translationkeyframe.cpp scalekeyframe.cpp rotationkeyframe.cpp animation.cpp animationmanager.cpp animationinstance.cpp animationplayer.cpp blendop.cpp crossfadeblendop.cpp)
ANIMATIONOBJ= $(call srcFilesToObjFiles,$(ANIMATIONSRCS),$(ANIMATIONSRC),$(OUTPUTDIR))

$(ANIMATIONOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(ANIMATIONSRC),$@,$(OUTPUTDIR))


# ==================================
# Shader
# ==================================

SHADERSRC= src/graphics/shader
SHADERSRCS= $(call toFullPath,$(SHADERSRC),shadersource.cpp shadersourcelines.cpp shader.cpp uniformdesc.cpp attributedesc.cpp shaderGL.cpp)
SHADEROBJ= $(call srcFilesToObjFiles,$(SHADERSRCS),$(SHADERSRC),$(OUTPUTDIR))
	
$(SHADEROBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(SHADERSRC),$@,$(OUTPUTDIR))


# ==================================
# Render
# ==================================

RENDERSRC= src/graphics/render
RENDERSRCS= $(call toFullPath,$(RENDERSRC), renderer.cpp mesh3Drenderer.cpp skinnedmesh3Drenderer.cpp submesh3Drenderer.cpp attributetransformer.cpp skinnedmesh3Dattrtransformer.cpp rendertarget.cpp vertexattrbuffer.cpp multimaterial.cpp material.cpp forwardrendermanager.cpp rendermanager.cpp vertexattrbufferGL.cpp rendertargetGL.cpp renderqueue.cpp renderqueuemanager.cpp)
RENDEROBJ= $(call srcFilesToObjFiles,$(RENDERSRCS),$(RENDERSRC),$(OUTPUTDIR))

$(RENDEROBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(RENDERSRC),$@,$(OUTPUTDIR))


# ==================================
# GraphicsObject
# ==================================

GRAPHICSOBJECTSRC= src/graphics/object
GRAPHICSOBJECTSRCS= $(call toFullPath,$(GRAPHICSOBJECTSRC),mesh3D.cpp submesh3D.cpp submesh3Dfaces.cpp submesh3Dface.cpp mesh3Dfilter.cpp customfloatattributebuffer.cpp)
GRAPHICSOBJECTOBJ= $(call srcFilesToObjFiles,$(GRAPHICSOBJECTSRCS),$(GRAPHICSOBJECTSRC),$(OUTPUTDIR))

$(GRAPHICSOBJECTOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(GRAPHICSOBJECTSRC),$@,$(OUTPUTDIR))


# ==================================
# Debug
# ==================================	

DEBUGSRC= src/debug
DEBUGSRCS= $(DEBUGSRC)/gtedebug.cpp
DEBUGOBJ= $(OUTPUTDIR)/gtedebug.o 

$(DEBUGOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(DEBUGSRC),$@,$(OUTPUTDIR))


# ==================================
# Geometry
# ==================================

GEOMETRYBASESRC= src/geometry
POINTSRC= $(GEOMETRYBASESRC)/point
VECTORSRC= $(GEOMETRYBASESRC)/vector

GEOMETRYBASESRCS= $(call toFullPath,$(GEOMETRYBASESRC),matrix4x4.cpp quaternion.cpp transform.cpp sceneobjecttransform.cpp)
POINTSRCS= $(call toFullPath,$(POINTSRC),point3.cpp point3factory.cpp point3array.cpp) 
VECTORSRCS= $(call toFullPath,$(VECTORSRC),vector3.cpp vector3factory.cpp vector3array.cpp vector2.cpp vector2factory.cpp vector2array.cpp)

ALLGEOMETRYSRCS= $(GEOMETRYBASESRCS) $(POINTSRCS) $(VECTORSRCS)

POINTOBJ= $(call srcFilesToObjFiles,$(POINTSRCS),$(POINTSRC),$(OUTPUTDIR))
VECTOROBJ= $(call srcFilesToObjFiles,$(VECTORSRCS),$(VECTORSRC),$(OUTPUTDIR))
BASEGEOMETRYOBJ= $(call srcFilesToObjFiles,$(GEOMETRYBASESRCS),$(GEOMETRYBASESRC),$(OUTPUTDIR))

ALLGEOMETRYOBJ= $(BASEGEOMETRYOBJ) $(POINTOBJ) $(VECTOROBJ)
	
$(POINTOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(POINTSRC),$@,$(OUTPUTDIR))
$(VECTOROBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(VECTORSRC),$@,$(OUTPUTDIR))
$(BASEGEOMETRYOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(GEOMETRYBASESRC),$@,$(OUTPUTDIR))


# ==================================
# Base
# ==================================

BASESRC= src/base
BASESRCS= $(call toFullPath,$(BASESRC),basevector4.cpp basevector2.cpp basevector2factory.cpp basevector4factory.cpp basevector2array.cpp basevector4array.cpp intmask.cpp longmask.cpp)
BASEOBJ= $(call srcFilesToObjFiles,$(BASESRCS),$(BASESRC),$(OUTPUTDIR))

$(BASEOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(BASESRC),$@,$(OUTPUTDIR))
	
	
# ==================================
# Util
# ==================================	

UTILSRC= src/util
UTILSRCS= $(call toFullPath,$(UTILSRC),datastack.cpp engineutility.cpp time.cpp)
UTILOBJ= $(call srcFilesToObjFiles,$(UTILSRCS),$(UTILSRC),$(OUTPUTDIR))

$(UTILOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(UTILSRC),$@,$(OUTPUTDIR))


# ==================================
# Math
# ==================================

GTEMATHSRC= src/gtemath
GTEMATHSRCS= $(GTEMATHSRC)/gtemath.cpp
GTEMATHOBJ= $(OUTPUTDIR)/gtemath.o

$(GTEMATHOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(call objFilesToSrcFiles,$(GTEMATHSRC),$@,$(OUTPUTDIR))


# ==================================
# ALL
# ==================================

ALLSRCS= $(ENGINESRCS) $(BASESRCS) $(UTILSRCS) $(ALLGTEDEMOSRCS) $(GTEMATHSRCS) $(ALLGEOMETRYSRCS) $(GRAPHICSOBJECTSRCS) $(DEBUGSRCS) $(SCENESRCS) $(PARTICLESSRCS) $(ALLGRAPHICSSRCS) $(ANIMATIONSRCS) $(IMAGESRCS) $(RENDERSRCS) $(SHADERSRCS) $(GLOBALSRCS) $(ENGINEOBJECTSRCS) $(ASSETSRCS) $(FILESYSTEMSRCS) $(INPUTSRCS) $(ERRORSRCS)

OBJECTFILES= $(ENGINEOBJ) $(BASEOBJ) $(UTILOBJ) $(ALLGTEDEMOOBJ) $(GTEMATHOBJ) $(ALLGEOMETRYOBJ) $(GRAPHICSOBJECTOBJ) $(DEBUGOBJ) $(SCENEOBJ) $(PARTICLEOBJ) $(ALLGRAPHICSOBJ) $(ANIMATIONOBJ) $(IMAGEOBJ) $(RENDEROBJ) $(SHADEROBJ) $(GLOBALOBJ) $(ENGINEOBJECTOBJ) $(ASSETOBJ) $(FILESYSTEMOBJ) $(INPUTOBJ) $(ERROROBJ)
