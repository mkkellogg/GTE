COMPILE= $(CC) $(CFLAGS)

define srcFilesToObjFiles
$(subst .cpp,.o,$(1:$(2)/%=$(3)/%))
endef

# ==================================
# GTE Demo
# ==================================

GTEDEMOSRC= src/gtedemo
GTEDEMOSRCS= $(GTEDEMOSRC)/gtedemo.cpp $(GTEDEMOSRC)/game.cpp $(GTEDEMOSRC)/gameutil.cpp $(GTEDEMOSRC)/lavafield.cpp $(GTEDEMOSRC)/scene.cpp $(GTEDEMOSRC)/scenes/lavascene.cpp $(GTEDEMOSRC)/scenes/castlescene.cpp $(GTEDEMOSRC)/scenes/poolscene.cpp
GTEDEMOBASEOBJ= $(OUTPUTDIR)/gtedemo.o $(OUTPUTDIR)/game.o $(OUTPUTDIR)/gameutil.o $(OUTPUTDIR)/lavafield.o $(OUTPUTDIR)/scene.o 
GTEDEMOSCENEOBJ = $(OUTPUTDIR)/lavascene.o $(OUTPUTDIR)/castlescene.o $(OUTPUTDIR)/poolscene.o

GTEDEMOOBJ= $(GTEDEMOBASEOBJ) $(GTEDEMOSCENEOBJ)

$(GTEDEMOBASEOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(subst .o,.cpp, $(GTEDEMOSRC)/$(@:$(OUTPUTDIR)/%=%))	
$(GTEDEMOSCENEOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(subst .o,.cpp, $(GTEDEMOSRC)/scenes/$(@:$(OUTPUTDIR)/%=%))
	

# ==================================
# Global
# ==================================	

GLOBALSRC= src/global
GLOBALSRCS= $(GLOBALSRC)/constants.cpp
GLOBALOBJ = $(OUTPUTDIR)/constants.o

$(OUTPUTDIR)/constants.o: $(GLOBALSRC)/constants.cpp $(GLOBALSRC)/constants.h
	$(CC) $(CFLAGS) -o $(OUTPUTDIR)/constants.o -c $(GLOBALSRC)/constants.cpp 
	

# ==================================
# Error
# ==================================	

ERRORSRC= src/error
ERRORSRCS= $(ERRORSRC)/errormanager.cpp
ERROROBJ= $(OUTPUTDIR)/errormanager.o

$(OUTPUTDIR)/errormanager.o: $(ERRORSRC)/errormanager.cpp $(ERRORSRC)/errormanager.h
	$(CC) $(CFLAGS) -o $(OUTPUTDIR)/errormanager.o -c $(ERRORSRC)/errormanager.cpp 
	

# ==================================
# FileSystem
# ==================================	

FILESYSTEMSRC= src/filesys
FILESYSTEMSRCS= $(FILESYSTEMSRC)/filesystem.cpp $(FILESYSTEMSRC)/filesystemIX.cpp
FILESYSTEMOBJ= $(OUTPUTDIR)/filesystem.o $(OUTPUTDIR)/filesystemIX.o

$(FILESYSTEMOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(subst .o,.cpp, $(FILESYSTEMSRC)/$(@:$(OUTPUTDIR)/%=%))

	
# ==================================
# Input
# ==================================	

INPUTSRC= src/input
INPUTSRCS= $(INPUTSRC)/inputmanager.cpp $(INPUTSRC)/inputmanagerGL.cpp
INPUTOBJ= $(OUTPUTDIR)/inputmanager.o $(OUTPUTDIR)/inputmanagerGL.o
	
$(INPUTOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(subst .o,.cpp, $(INPUTSRC)/$(@:$(OUTPUTDIR)/%=%))
	
# ==================================
# Engine
# ==================================	

ENGINESRC= src
ENGINESRCS= $(ENGINESRC)/engine.cpp
ENGINEOBJ = $(OUTPUTDIR)/engine.o

$(OUTPUTDIR)/engine.o: $(ENGINESRC)/engine.cpp $(ENGINESRC)/engine.h
	$(CC) $(CFLAGS) -o $(OUTPUTDIR)/engine.o -c $(ENGINESRC)/engine.cpp 
	
	
# ==================================
# EngineObjects
# ==================================

ENGINEOBJECTSRC= src/object
ENGINEOBJECTSRCS= $(ENGINEOBJECTSRC)/sceneobjectcomponent.cpp $(ENGINEOBJECTSRC)/engineobjectmanager.cpp $(ENGINEOBJECTSRC)/engineobject.cpp $(ENGINEOBJECTSRC)/sceneobject.cpp $(ENGINEOBJECTSRC)/shaderorganizer.cpp $(ENGINEOBJECTSRC)/objectpairkey.cpp $(ENGINEOBJECTSRC)/layermanager.cpp
ENGINEOBJECTOBJ= $(OUTPUTDIR)/sceneobjectcomponent.o $(OUTPUTDIR)/engineobjectmanager.o $(OUTPUTDIR)/engineobject.o $(OUTPUTDIR)/sceneobject.o $(OUTPUTDIR)/shaderorganizer.o $(OUTPUTDIR)/objectpairkey.o $(OUTPUTDIR)/layermanager.o
		
$(ENGINEOBJECTOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(subst .o,.cpp, $(ENGINEOBJECTSRC)/$(@:$(OUTPUTDIR)/%=%))
	
	
# ==================================
# Asset
# ==================================

ASSETSRC= src/asset
ASSETOBJS= $(ASSETSRC)/assetimporter.cpp $(ASSETSRC)/importutil.cpp $(ASSETSRC)/modelimporter.cpp $(ASSETSRC)/modelimporter.cpp $(ASSETSRC)/shadersourceloader.cpp $(ASSETSRC)/shadersourceloaderGL.cpp
ASSETOBJ= $(OUTPUTDIR)/assetimporter.o $(OUTPUTDIR)/importutil.o $(OUTPUTDIR)/modelimporter.o $(OUTPUTDIR)/shadersourceloader.o $(OUTPUTDIR)/shadersourceloaderGL.o
	
$(ASSETOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(subst .o,.cpp, $(ASSETSRC)/$(@:$(OUTPUTDIR)/%=%))
	
		
# ==================================
# Image processing
# ==================================	

IMAGESRC= src/graphics/image
IMAGESRCS= $(IMAGESRC)/rawimage.cpp $(IMAGESRC)/imageloader.cpp
IMAGEOBJ= $(OUTPUTDIR)/rawimage.o $(OUTPUTDIR)/imageloader.o
	
$(IMAGEOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(subst .o,.cpp, $(IMAGESRC)/$(@:$(OUTPUTDIR)/%=%))
	
	
# ==================================
# Graphics
# ==================================

BASEGRAPHICSSRC= src/graphics
LIGHTSRC= $(BASEGRAPHICSSRC)/light
TEXTURESRC= $(BASEGRAPHICSSRC)/texture
VIEWSYSSRC= $(BASEGRAPHICSSRC)/view
COLORSRC= $(BASEGRAPHICSSRC)/color
UVSRC= $(BASEGRAPHICSSRC)/uv

LIGHTSRCS= $(LIGHTSRC)/light.cpp
TEXTURESRCS= $(TEXTURESRC)/texture.cpp $(TEXTURESRC)/textureattr.cpp $(TEXTURESRC)/textureGL.cpp
VIEWSYSSRCS= $(VIEWSYSSRC)/camera.cpp
COLORSRCS= $(COLORSRC)/color4.cpp $(COLORSRC)/color4factory.cpp $(COLORSRC)/color4array.cpp
UVSRCS= $(UVSRC)/uv2.cpp $(UVSRC)/uv2factory.cpp $(UVSRC)/uv2array.cpp
BASEGRAPHICSSRCS= $(BASEGRAPHICSSRC)/graphics.cpp $(BASEGRAPHICSSRC)/stdattributes.cpp $(BASEGRAPHICSSRC)/stduniforms.cpp $(BASEGRAPHICSSRC)/screendesc.cpp $(BASEGRAPHICSSRC)/graphicsGL.cpp 

ALLGRAPHICSSRCS= $(BASEGRAPHICSSRCS) $(LIGHTSRCS) $(TEXTURESRCS) $(VIEWSYSSRCS) $(COLORSRCS) $(UVSRCS) 

#  BASEGRAPHICSOBJ= $(call srcFilesToObjFiles,$(BASEGRAPHICSSRCS),$(BASEGRAPHICSSRC),$(OUTPUTDIR))
BASEGRAPHICSOBJ= $(OUTPUTDIR)/graphics.o $(OUTPUTDIR)/stdattributes.o $(OUTPUTDIR)/stduniforms.o $(OUTPUTDIR)/screendesc.o $(OUTPUTDIR)/graphicsGL.o
COLOROBJ= $(OUTPUTDIR)/color4.o $(OUTPUTDIR)/color4factory.o $(OUTPUTDIR)/color4array.o
LIGHTOBJ= $(OUTPUTDIR)/light.o
TEXTUREOBJ= $(OUTPUTDIR)/texture.o $(OUTPUTDIR)/textureattr.o  $(OUTPUTDIR)/textureGL.o
VIEWSYSOBJ= $(OUTPUTDIR)/camera.o
UVOBJ= $(OUTPUTDIR)/uv2.o $(OUTPUTDIR)/uv2factory.o $(OUTPUTDIR)/uv2array.o

ALLGRAPHICSOBJ = $(BASEGRAPHICSOBJ) $(COLOROBJ) $(LIGHTOBJ) $(TEXTUREOBJ) $(VIEWSYSOBJ) $(UVOBJ)

$(BASEGRAPHICSOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(subst .o,.cpp, $(BASEGRAPHICSSRC)/$(@:$(OUTPUTDIR)/%=%))
	
$(LIGHTOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(subst .o,.cpp, $(LIGHTSRC)/$(@:$(OUTPUTDIR)/%=%))
	
$(TEXTUREOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(subst .o,.cpp, $(TEXTURESRC)/$(@:$(OUTPUTDIR)/%=%))
	
$(VIEWSYSOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(subst .o,.cpp, $(VIEWSYSSRC)/$(@:$(OUTPUTDIR)/%=%))
	
$(COLOROBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(subst .o,.cpp, $(COLORSRC)/$(@:$(OUTPUTDIR)/%=%))
	
$(UVOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(subst .o,.cpp, $(UVSRC)/$(@:$(OUTPUTDIR)/%=%))	

	

# ==================================
# Animation
# ==================================	

ANIMATIONSRC= src/graphics/animation
ANIMATIONSRCS= $(ANIMATIONSRC)/skeleton.cpp $(ANIMATIONSRC)/vertexbonemap.cpp $(ANIMATIONSRC)/skeletonnode.cpp $(ANIMATIONSRC)/bone.cpp $(ANIMATIONSRC)/sceneobjectskeletonnode.cpp $(ANIMATIONSRC)/keyframeset.cpp $(ANIMATIONSRC)/keyframe.cpp $(ANIMATIONSRC)/translationkeyframe.cpp $(ANIMATIONSRC)/scalekeyframe.cpp $(ANIMATIONSRC)/rotationkeyframe.cpp $(ANIMATIONSRC)/animation.cpp $(ANIMATIONSRC)/animationmanager.cpp $(ANIMATIONSRC)/animationinstance.cpp $(ANIMATIONSRC)/animationplayer.cpp $(ANIMATIONSRC)/blendop.cpp $(ANIMATIONSRC)/crossfadeblendop.cpp
ANIMATIONOBJ= $(OUTPUTDIR)/skeleton.o $(OUTPUTDIR)/vertexbonemap.o $(OUTPUTDIR)/skeletonnode.o $(OUTPUTDIR)/bone.o $(OUTPUTDIR)/sceneobjectskeletonnode.o $(OUTPUTDIR)/keyframeset.o $(OUTPUTDIR)/keyframe.o $(OUTPUTDIR)/translationkeyframe.o $(OUTPUTDIR)/scalekeyframe.o $(OUTPUTDIR)/rotationkeyframe.o $(OUTPUTDIR)/animation.o $(OUTPUTDIR)/animationmanager.o $(OUTPUTDIR)/animationinstance.o $(OUTPUTDIR)/animationplayer.o $(OUTPUTDIR)/blendop.o $(OUTPUTDIR)/crossfadeblendop.o

$(ANIMATIONOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(subst .o,.cpp, $(ANIMATIONSRC)/$(@:$(OUTPUTDIR)/%=%))
	
	
# ==================================
# Shader
# ==================================	

SHADERSRC= src/graphics/shader
SHADERSRCS= $(SHADERSRC)/shadersource.cpp $(SHADERSRC)/shader.cpp $(SHADERSRC)/uniformdesc.cpp $(SHADERSRC)/attributedesc.cpp $(SHADERSRC)/shaderGL.cpp
SHADEROBJ= $(OUTPUTDIR)/shadersource.o $(OUTPUTDIR)/shader.o $(OUTPUTDIR)/uniformdesc.o $(OUTPUTDIR)/attributedesc.o $(OUTPUTDIR)/shaderGL.o
	
$(SHADEROBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(subst .o,.cpp, $(SHADERSRC)/$(@:$(OUTPUTDIR)/%=%))

	
# ==================================
# Render
# ==================================

RENDERSRC= src/graphics/render
RENDERSRCS= $(RENDERSRC)/mesh3Drenderer.cpp $(RENDERSRC)/skinnedmesh3Drenderer.cpp $(RENDERSRC)/submesh3Drenderer.cpp $(RENDERSRC)/attributetransformer.cpp $(RENDERSRC)/skinnedmesh3Dattrtransformer.cpp $(RENDERSRC)/rendertarget.cpp $(RENDERSRC)/vertexattrbuffer.cpp $(RENDERSRC)/material.cpp $(RENDERSRC)/rendermanager.cpp $(RENDERSRC)/vertexattrbufferGL.cpp $(RENDERSRC)/rendertargetGL.cpp
RENDEROBJ= $(OUTPUTDIR)/mesh3Drenderer.o $(OUTPUTDIR)/skinnedmesh3Drenderer.o $(OUTPUTDIR)/submesh3Drenderer.o $(OUTPUTDIR)/attributetransformer.o $(OUTPUTDIR)/skinnedmesh3Dattrtransformer.o $(OUTPUTDIR)/rendertarget.o  $(OUTPUTDIR)/vertexattrbuffer.o $(OUTPUTDIR)/material.o $(OUTPUTDIR)/rendermanager.o  $(OUTPUTDIR)/vertexattrbufferGL.o $(OUTPUTDIR)/rendertargetGL.o

$(RENDEROBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(subst .o,.cpp, $(RENDERSRC)/$(@:$(OUTPUTDIR)/%=%))
	
	
# ==================================
# GraphicsObject
# ==================================

GRAPHICSOBJECTSRC= src/graphics/object
GRAPHICSOBJECTSRCS= $(GRAPHICSOBJECTSRC)/mesh3D.cpp $(GRAPHICSOBJECTSRC)/submesh3D.cpp $(GRAPHICSOBJECTSRC)/submesh3Dfaces.cpp $(GRAPHICSOBJECTSRC)/submesh3Dface.cpp $(GRAPHICSOBJECTSRC)/mesh3Dfilter.cpp
GRAPHICSOBJECTOBJ= $(OUTPUTDIR)/mesh3D.o $(OUTPUTDIR)/submesh3D.o $(OUTPUTDIR)/submesh3Dfaces.o $(OUTPUTDIR)/submesh3Dface.o $(OUTPUTDIR)/mesh3Dfilter.o
	
$(GRAPHICSOBJECTOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(subst .o,.cpp, $(GRAPHICSOBJECTSRC)/$(@:$(OUTPUTDIR)/%=%))
	
	
# ==================================
# Debug
# ==================================	

DEBUGSRC= src/debug
DEBUGSRCS= $(DEBUGSRC)/gtedebug.cpp
DEBUGOBJ= $(OUTPUTDIR)/gtedebug.o 

$(OUTPUTDIR)/gtedebug.o: $(DEBUGSRC)/gtedebug.cpp $(DEBUGSRC)/gtedebug.h
	$(CC) $(CFLAGS) -o $(OUTPUTDIR)/gtedebug.o -c  $(DEBUGSRC)/gtedebug.cpp 


# ==================================
# Geometry
# ==================================

GEOMETRYSRC= src/geometry
GEOMETRYSRCS= $(GEOMETRYSRC)/matrix4x4.cpp $(GEOMETRYSRC)/quaternion.cpp $(GEOMETRYSRC)/point/point3.cpp $(GEOMETRYSRC)/vector/vector3.cpp $(GEOMETRYSRC)/vector/vector3factory.cpp $(GEOMETRYSRC)/point/point3factory.cpp $(GEOMETRYSRC)/vector/vector3array.cpp $(GEOMETRYSRC)/point/point3array.cpp $(GEOMETRYSRC)/transform.cpp $(GEOMETRYSRC)/scenobjecttransform.cpp

POINTOBJ= $(OUTPUTDIR)/point3.o $(OUTPUTDIR)/point3factory.o $(OUTPUTDIR)/point3array.o
VECTOROBJ= $(OUTPUTDIR)/vector3.o $(OUTPUTDIR)/vector3factory.o $(OUTPUTDIR)/vector3array.o
BASEGEOMETRYOBJ= $(OUTPUTDIR)/matrix4x4.o $(OUTPUTDIR)/quaternion.o  $(OUTPUTDIR)/transform.o $(OUTPUTDIR)/sceneobjecttransform.o 
GEOMETRYOBJ= $(BASEGEOMETRYOBJ) $(POINTOBJ) $(VECTOROBJ)
	
$(POINTOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(subst .o,.cpp, $(GEOMETRYSRC)/point/$(@:$(OUTPUTDIR)/%=%))
$(VECTOROBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(subst .o,.cpp, $(GEOMETRYSRC)/vector/$(@:$(OUTPUTDIR)/%=%))
$(BASEGEOMETRYOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(subst .o,.cpp, $(GEOMETRYSRC)/$(@:$(OUTPUTDIR)/%=%))


# ==================================
# Base
# ==================================

BASESRC= src/base
BASESRCS= $(BASESRC)/basevector4.cpp $(BASESRC)/basevector2.cpp $(BASESRC)/basevector2factory.cpp $(BASESRC)/basevector4factory.cpp $(BASESRC)/basevector2array.cpp $(BASESRC)/basevector4array.cpp $(BASESRC)/intmask.cpp $(BASESRC)/longmask.cpp
BASEOBJ= $(OUTPUTDIR)/basevector4.o $(OUTPUTDIR)/basevector2.o $(OUTPUTDIR)/basevector2factory.o $(OUTPUTDIR)/basevector4factory.o $(OUTPUTDIR)/basevector2array.o $(OUTPUTDIR)/basevector4array.o $(OUTPUTDIR)/intmask.o $(OUTPUTDIR)/longmask.o

$(BASEOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(subst .o,.cpp, $(BASESRC)/$(@:$(OUTPUTDIR)/%=%))
	
	
# ==================================
# Util
# ==================================	

UTILSRC= src/util
UTILSRCS= $(UTILSRC)/datastack.cpp $(UTILSRC)/engineutility.cpp $(UTILSRC)/time.cpp
UTILOBJ= $(OUTPUTDIR)/datastack.o $(OUTPUTDIR)/engineutility.o $(OUTPUTDIR)/time.o

$(UTILOBJ): 
	$(CC) $(CFLAGS) -o $@ -c $(subst .o,.cpp, $(UTILSRC)/$(@:$(OUTPUTDIR)/%=%))

# ==================================
# Math
# ==================================

GTEMATHSRC= src/gtemath
GTEMATHSRCS= $(GTEMATHSRC)/gtemath.cpp
GTEMATHOBJ= $(OUTPUTDIR)/gtemath.o

$(OUTPUTDIR)/gtemath.o: $(GTEMATHSRC)/gtemath.cpp $(GTEMATHSRC)/gtemath.h
	$(CC) $(CFLAGS) -o $(OUTPUTDIR)/gtemath.o -c $(GTEMATHSRC)/gtemath.cpp

# ==================================
# MAIN
# ==================================

ALLSRCS= $(ENGINESRCS) $(BASESRCS) $(UTILSRCS) $(GTEDEMOSRCS) $(GTEMATHSRCS) $(GEOMETRYSRCS) $(GRAPHICSOBJECTSRCS) $(DEBUGSRCS) $(ALLGRAPHICSSRCS) $(ANIMATIONSRCS) $(IMAGESRCS) $(RENDERSRCS) $(SHADERSRCS) $(GLOBALSRCS) $(ENGINEOBJECTSRCS) $(ASSETSRCS) $(FILESYSTEMSRCS) $(INPUTSRCS) $(ERRORSRCS)

OBJECTFILES= $(ENGINEOBJ) $(BASEOBJ) $(UTILOBJ) $(GTEDEMOOBJ) $(GTEMATHOBJ) $(GEOMETRYOBJ) $(GRAPHICSOBJECTOBJ) $(DEBUGOBJ) $(ALLGRAPHICSOBJ) $(ANIMATIONOBJ) $(IMAGEOBJ) $(RENDEROBJ) $(SHADEROBJ) $(GLOBALOBJ) $(ENGINEOBJECTOBJ) $(ASSETOBJ) $(FILESYSTEMOBJ) $(INPUTOBJ) $(ERROROBJ)
